#pragma once
/*
	게임이라고 하는 것은 어떻게 구성되어 있는가?를 근본적으로 생각해보면

	ex| 다크 소울의 경우, 게임이 실제로 진행되는 3D 공간을 출력하던 와중
	    인벤토리를 한번 열어봤을 때 화면에 인벤토리의 내용이 표기될 것

		그런데 인벤토리가 열려있는 와중에도 게임 자체는 실시간으로 계속 진행되고 있음
		인벤토리에서 아이템을 보던 와중 적에게 공격당하면 창은 열러있는 상황인데
		체력은 실시간으로 감소하는 등 정상적으로 게임이 계속 진행되는 걸 확인 가능
		-> 인벤토리를 보는 창이 저 3D 공간을 표시하는 그래픽 위에 같은 출력되고 있다는 의미

		그렇다면 이 둘은 적어도 같은 화면에서 동시 출력이 가능한 두 개의 화면이라 할 수 있음
		이 둘은 구조상으로 완전히 다른 것이라 볼 수 있는가?
		-> 근본적으로는 둘 다 똑같은 "게임 화면"이라는 공통점을 가지고 있음
		   한쪽은 3D 공간으로 다루는 메인 플레이 화면이고,
		   다른 한 쪽은 인벤토리를 다루는 서브 화면이라 할 수 있음
		   어느 쪽이건 오브젝트 등화 각각에 맞는 기능들이 구현되어 있는 하나의 화면

	이런 식으로, 게임은 기본적으로 "화면" 단위로 구성됨
	실제 게임 플레이를 담당하는 화면이 따로 있고
	인벤토리를 담당하는 화면이 따로 있으면
	설정을 담당하는 화면 역시 따로 있음

	어느쪽이건 전부 화면이니
	그 화면들 전체가 공통된 구성으로 되어있어야 이런 화면들을 쉽게 구성할 수 있을 것
	그래서 화면을 담당하는 부모 클래스 자체를 만들고,
	실제 게임을 구성하는 화면들을 담당하게 될 클래스들은 이를 상속시켜서 구성함
*/

class Scene
{
protected:
	VertexShader* VS;
	PixelShader* PS;
	// 지금은 출력을 Scene에서 전담하기 때문에 여기서 만들어진 것이지만,
	// 앞으로는 우리가 만들 각 오브젝트가 알아서 출력을 담당할 예정

public:
	// 상속용 클래스이므로 모든 함수가 가상 함수
	virtual ~Scene() {};
	// 소멸자 경우엔 반드시 만들어두기는 해야하니 그냥 가상 함수로

	virtual void Update() = 0;
	virtual void Render() = 0;
	// 자식 클래스에서 반드시 만들어야 하는
	// 업데이트 / 출력 함수는 순수 가상함수로 생성
};

// Scene : 사전적인 의미로 따지면 "장면"이란 뜻
// 게임 프로그래밍에서는 "최소 하나의 게임 진행이 이뤄지는 공간"이라는 의미로 사용됨
// 설정이나 게임을 막 켰을 때의 메인 화면 등도 하나의 Scene으로 취급
// -> 게임 프로그래밍은 기본적으로 여러 Scene을 만들어서 
// 각각의 Scene이 게임의 특정 단계를 맡도록 설계하고,
// 필요에 따라 그 Scene을 교체해서 사용하여 게임을 진행시키는 식으로 만드는 형식

// 이 Scene이라는 클래스는 그런 Scene을 만들 때 사용할 인터페이스를 만든 것
